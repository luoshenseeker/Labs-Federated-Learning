from math import floor

import numpy as np


def allocation(cohesion_list):
    # print(cohesion_list)
    avg_cohesion = np.zeros(len(cohesion_list))

    for i, cluster_cohesion in enumerate(cohesion_list):
        avg_cohesion[i] = sum(cluster_cohesion) / len(cluster_cohesion)

    print(avg_cohesion)

    for cluster_coh in avg_cohesion:
        weight = cluster_coh / sum(avg_cohesion)
        number = floor(p * N * weight)
        print(number)

    # 还需要考虑cluster的大小！ #





def calculate_cohesion(cluster_result: list):
    """return a cohesion list
    """
    cohesion_list = []
    # for i in range(N_CLASSES):
    #     cohesion_list.append(np.zeros(SIZE_CLASSES[i]))

    for row_cluster in cluster_result:
        # cohesion_list[i] = calculate_row_cohesion(cluster_result[i])
        cohesion_list.append(calculate_cluster_cohesion(row_cluster))

    return cohesion_list


def euclidean_distance(vec1, vec2):
    """calculate the euclidean distance between two vectors
    """
    return np.sqrt(np.sum(np.square(vec1 - vec2)))


def calculate_cluster_cohesion(row_cluster):
    """calculate each cluster's cohesion
    """
    dist = np.zeros(len(row_cluster))

    for j in range(len(row_cluster)):
        for k in range(len(row_cluster)):
            if k == j:
                pass
            else:
                dist[j] += euclidean_distance(np.array(partition_result[j]), np.array(partition_result[k]))

    dist /= len(row_cluster)

    return dist




partition_result = [[52, 59, 61, 65, 64, 45, 58, 72, 52, 72], [53, 73, 62, 69, 71, 49, 53, 61, 67, 42], [52, 75, 54, 65, 58, 49, 68, 61, 59, 59], [55, 63, 66, 54, 65, 43, 60, 63, 65, 66], [57, 65, 61, 65, 59, 48, 66, 65, 56, 58], [68, 65, 47, 62, 69, 49, 65, 68, 55, 52], [58, 61, 58, 65, 70, 44, 56, 71, 46, 71], [50, 53, 75, 60, 71, 55, 49, 61, 74, 52], [65, 66, 55, 67, 65, 50, 53, 57, 61, 61], [58, 69, 59, 60, 67, 49, 65, 61, 63, 49], [60, 67, 66, 61, 69, 51, 64, 63, 51, 48], [53, 68, 74, 62, 48, 52, 57, 65, 56, 65], [47, 56, 61, 65, 57, 59, 59, 70, 60, 66], [61, 54, 67, 66, 57, 52, 74, 65, 53, 51], [63, 63, 62, 66, 59, 46, 59, 58, 63, 61], [64, 59, 57, 58, 65, 56, 57, 61, 60, 63], [59, 72, 62, 53, 58, 54, 55, 57, 58, 72], [63, 73, 66, 59, 50, 65, 60, 69, 46, 49], [53, 74, 59, 61, 49, 63, 50, 75, 62, 54], [61, 74, 65, 59, 45, 56, 66, 53, 67, 54], [68, 59, 57, 63, 59, 57, 69, 60, 50, 58], [53, 56, 66, 63, 57, 45, 59, 66, 81, 54], [55, 73, 59, 61, 66, 44, 62, 63, 59, 58], [54, 67, 53, 51, 56, 74, 74, 58, 53, 60], [64, 80, 59, 55, 60, 62, 47, 55, 64, 54], [53, 58, 68, 63, 64, 64, 60, 59, 55, 56], [55, 72, 65, 73, 46, 50, 48, 63, 59, 69], [57, 73, 61, 61, 49, 49, 55, 71, 56, 68], [49, 69, 53, 59, 46, 57, 78, 62, 64, 63], [55, 58, 60, 58, 57, 55, 69, 66, 71, 51], [61, 70, 60, 61, 65, 53, 55, 60, 57, 58], [47, 66, 49, 64, 50, 72, 61, 59, 64, 68], [71, 53, 65, 64, 53, 60, 63, 52, 62, 57], [58, 70, 57, 41, 55, 72, 64, 77, 60, 46], [70, 68, 52, 63, 53, 46, 62, 64, 68, 54], [66, 70, 55, 57, 67, 59, 50, 53, 45, 78], [52, 69, 75, 66, 61, 60, 46, 54, 62, 55], [53, 80, 73, 57, 53, 48, 56, 59, 61, 60], [63, 76, 58, 61, 67, 49, 43, 62, 66, 55], [56, 63, 72, 76, 54, 47, 51, 76, 52, 53], [64, 82, 56, 63, 55, 45, 51, 57, 62, 65], [62, 65, 65, 59, 60, 52, 68, 59, 59, 51], [64, 65, 59, 68, 55, 48, 57, 63, 51, 70], [66, 52, 58, 73, 49, 51, 59, 64, 61, 67], [64, 63, 56, 54, 70, 54, 69, 55, 65, 50], [54, 81, 55, 52, 45, 58, 67, 72, 62, 54], [60, 69, 51, 81, 59, 44, 57, 66, 57, 56], [65, 68, 56, 62, 61, 56, 69, 51, 56, 56], [68, 69, 55, 63, 58, 45, 55, 67, 67, 53], [55, 65, 57, 57, 57, 55, 71, 69, 56, 58], [62, 70, 62, 53, 64, 55, 45, 64, 65, 60], [68, 64, 79, 62, 62, 61, 52, 53, 48, 51], [69, 74, 59, 48, 50, 50, 72, 71, 54, 53], [62, 69, 65, 63, 49, 58, 51, 52, 64, 67], [72, 73, 60, 68, 48, 53, 64, 50, 58, 54], [64, 57, 64, 59, 48, 52, 57, 51, 65, 83], [60, 59, 55, 70, 62, 50, 68, 55, 59, 62], [59, 78, 49, 56, 57, 56, 58, 68, 57, 62], [51, 70, 65, 52, 70, 53, 61, 72, 61, 45], [56, 74, 79, 50, 59, 49, 54, 66, 54, 59], [67, 78, 56, 67, 52, 54, 53, 59, 52, 62], [55, 79, 56, 62, 62, 66, 49, 60, 58, 53], [60, 75, 58, 58, 60, 49, 59, 66, 64, 51], [68, 62, 59, 69, 50, 52, 60, 68, 56, 56], [53, 84, 61, 59, 43, 60, 61, 57, 52, 70], [67, 67, 55, 60, 64, 47, 45, 76, 65, 54], [65, 64, 60, 56, 66, 50, 69, 65, 48, 57], [61, 59, 45, 61, 61, 52, 71, 63, 58, 69], [60, 76, 58, 58, 52, 44, 58, 72, 53, 69], [67, 66, 53, 55, 65, 53, 55, 51, 67, 68], [67, 69, 59, 59, 54, 50, 62, 70, 53, 57], [60, 66, 60, 63, 56, 56, 48, 64, 62, 65], [63, 67, 56, 71, 62, 61, 55, 57, 52, 56], [58, 65, 50, 62, 56, 51, 66, 74, 60, 58], [42, 80, 62, 69, 68, 53, 55, 58, 50, 63], [55, 66, 57, 52, 68, 66, 59, 54, 66, 57], [59, 68, 48, 65, 58, 62, 55, 55, 61, 69], [47, 63, 63, 62, 68, 38, 60, 66, 67, 66], [59, 79, 59, 60, 56, 53, 50, 59, 57, 68], [73, 61, 49, 69, 45, 64, 54, 67, 61, 57], [68, 64, 55, 68, 59, 53, 59, 67, 49, 58], [61, 59, 55, 68, 55, 62, 65, 53, 46, 76], [63, 55, 64, 45, 64, 72, 56, 62, 58, 61], [66, 75, 48, 75, 52, 50, 61, 74, 47, 52], [52, 79, 68, 57, 59, 51, 57, 68, 59, 50], [63, 69, 66, 60, 59, 55, 59, 60, 50, 59], [59, 64, 74, 72, 64, 63, 47, 45, 47, 65], [52, 52, 65, 70, 61, 46, 72, 56, 61, 65], [63, 77, 55, 65, 57, 56, 58, 61, 56, 52], [62, 70, 55, 44, 58, 53, 65, 71, 55, 67], [50, 55, 66, 62, 73, 57, 57, 58, 66, 56], [57, 68, 54, 61, 68, 51, 65, 62, 61, 53], [55, 75, 65, 67, 62, 48, 72, 55, 53, 48], [60, 72, 45, 60, 64, 58, 57, 73, 51, 60], [75, 62, 60, 47, 56, 62, 55, 56, 65, 62], [42, 68, 57, 63, 64, 64, 63, 49, 65, 65], [53, 68, 51, 60, 45, 61, 62, 83, 62, 55], [50, 76, 44, 61, 50, 58, 54, 77, 58, 72], [57, 56, 69, 53, 66, 55, 47, 66, 55, 76], [52, 58, 59, 64, 48, 62, 72, 68, 61, 56]]
cluster_result = [[16, 26, 35, 40, 53, 55, 69, 71, 76, 78, 94], [4, 5, 13, 49, 52, 66, 99], [24, 36, 37, 38, 50, 51, 59, 61, 74, 82, 86, 95, 98], [27, 31, 42, 43, 57, 60, 64, 68, 79, 81, 97], [3, 21, 22, 33, 62, 77, 84, 87], [0, 6, 8, 11, 12, 14, 15, 18, 19, 30, 32, 39, 65, 72, 85], [20, 28, 63, 67, 70, 73, 80, 83, 96], [1, 7, 25, 75, 90], [9, 10, 29, 41, 44, 58, 91, 92], [2, 17, 23, 34, 45, 46, 47, 48, 54, 56, 88, 89, 93]]
allocation(calculate_cohesion(cluster_result))

